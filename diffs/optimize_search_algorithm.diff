diff --git a/src/search/search_engine.py b/src/search/search_engine.py
index 4567890..defghij 100644
--- a/src/search/search_engine.py
+++ b/src/search/search_engine.py
@@ -1,35 +1,52 @@
 import time
+from collections import defaultdict
+import re
 
 class SearchEngine:
     def __init__(self):
         self.data = []
+        self.index = defaultdict(set)
+        self.cache = {}
     
     def add_document(self, doc_id, content):
         self.data.append({'id': doc_id, 'content': content})
+        # Build inverted index
+        words = re.findall(r'\w+', content.lower())
+        for word in words:
+            self.index[word].add(doc_id)
     
     def search(self, query):
+        # Check cache first
+        if query in self.cache:
+            return self.cache[query]
+        
         results = []
-        for item in self.data:
-            if query.lower() in item['content'].lower():
-                results.append(item)
+        query_words = re.findall(r'\w+', query.lower())
+        
+        # Use inverted index for faster search
+        if query_words:
+            doc_ids = self.index[query_words[0]]
+            for word in query_words[1:]:
+                doc_ids = doc_ids.intersection(self.index[word])
+            
+            for doc_id in doc_ids:
+                for item in self.data:
+                    if item['id'] == doc_id:
+                        results.append(item)
+                        break
+        
+        # Cache results
+        self.cache[query] = results
         return results
     
-    def search_with_ranking(self, query):
-        results = []
-        for item in self.data:
-            content_lower = item['content'].lower()
-            query_lower = query.lower()
-            if query_lower in content_lower:
-                # Simple ranking based on occurrence count
-                count = content_lower.count(query_lower)
-                results.append({
-                    'item': item,
-                    'score': count
-                })
+    def clear_cache(self):
+        self.cache = {}
+    
+    def get_statistics(self):
+        return {
+            'total_documents': len(self.data),
+            'unique_words': len(self.index),
+            'cached_queries': len(self.cache)
+        }
     
-        # Sort by score
-        results.sort(key=lambda x: x['score'], reverse=True)
-        return [r['item'] for r in results]
-
 if __name__ == "__main__":
     engine = SearchEngine()
     engine.add_document(1, "Python programming language")